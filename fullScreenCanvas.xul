<?xml version="1.0"?>
<!--
 Full Screen Canvas

 ***************************Note!!***************************
 This library is obsolete. You don't have to use this even
 if you want to do heavy operations without refreshing.
 You should use stopRendering.js instead of this.
 http://www.cozmixng.org/repos/piro/fx3-compatibility-lib/trunk/stopRendering.js
 ************************************************************

 Usage:
   window.fullScreenCanvas.show();
   ... // do something
   window.fullScreenCanvas.hide();

 lisence: The MIT License, Copyright (c) 2009-2010 SHIMODA "Piro" Hiroshi
   http://www.cozmixng.org/repos/piro/fx3-compatibility-lib/trunk/license.txt
 original:
   http://www.cozmixng.org/repos/piro/fx3-compatibility-lib/trunk/fullScreenCanvas.xul
-->
<overlay xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
<script type="application/javascript"><![CDATA[

window.addEventListener('DOMContentLoaded', function() {
	window.removeEventListener('DOMContentLoaded', arguments.callee, true);

	const currentRevision = 12;
	var root = document.documentElement;

	var loadedRevision = root.getAttribute('fullScreenCanvas');
	if (loadedRevision) {
		loadedRevision = Number(loadedRevision);
		if (loadedRevision >= currentRevision) {
			return;
		}
		else if (loadedRevision < currentRevision) {
			root.setAttribute('fullScreenCanvas', currentRevision);
			window.fullScreenCanvas.destroy();
		}
	}

	window.fullScreenCanvas = {
		DRAW_WINDOW_FLAGS : Ci.nsIDOMCanvasRenderingContext2D.DRAWWINDOW_DRAW_VIEW |
							Ci.nsIDOMCanvasRenderingContext2D.DRAWWINDOW_DRAW_CARET |
							Ci.nsIDOMCanvasRenderingContext2D.DRAWWINDOW_DO_NOT_FLUSH,
		DRAW_WINDOW_BGCOLOR : 'transparent',

		show : function(aTargetElement, aCallback, aThis) 
		{
			this.doShow(aTargetElement);
			if (!aCallback) return;
			aCallback.call(aThis || window);
		},
		doShow : function(aTargetElement) 
		{
			if (this.shown) return;

			var canvas = this.canvas;
			if (!canvas) return;

			this.shown = true;

			var rootBox = document.documentElement.boxObject;
			var canvasW = window.innerWidth;
			var canvasH = window.innerHeight;

			var x = 0,
				y = 0,
				w = canvasW,
				h = canvasH;

			canvas.style.width  = (canvas.width = canvasW)+'px';
			canvas.style.height = (canvas.height = canvasH)+'px';
			try {
				var ctx = canvas.getContext('2d');
				ctx.clearRect(0, 0, canvasW, canvasH);
				ctx.save();
				ctx.translate(x, y);
				ctx.drawWindow(window, x, y, w, h, this.DRAW_WINDOW_BGCOLOR, this.DRAW_WINDOW_FLAGS);
				ctx.restore();

				this.browsers.forEach(function(aBrowser) {
					try {
						var b = aBrowser;
						if (b.localName == 'subbrowser') b = b.browser;
						var frame = b.contentWindow;
						var box = (b.localName == 'tabbrowser' ? b.mCurrentBrowser : b ).boxObject;
						var x = box.x;
						var y = box.y;
						var bw = box.width;
						var bh = box.height;
						var w = frame.innerWidth;
						var h = frame.innerHeight;
						ctx.save();
						ctx.translate(x, y);
						ctx.scale(bw / w, bh / h);
						ctx.drawWindow(frame, 0, 0, w, h, this.DRAW_WINDOW_BGCOLOR, this.DRAW_WINDOW_FLAGS);
						ctx.restore();
					}
					catch(e) {
					}
				}, this);

				document.documentElement.setAttribute('fullScreenCanvas-state', 'shown');
			}
			catch(e) {
				this.hide();
			}
		},
		shown : false,

		hide : function()
		{
			if (!this.shown) return;

			document.documentElement.removeAttribute('fullScreenCanvas-state');
			this.shown = false;
		},

		onClick : function(aEvent)
		{
			this.hide();
		},


		get browsers()
		{
			browsers = [].concat(Array.slice(document.getElementsByTagName('tabbrowser')))
						.concat(Array.slice(document.getElementsByTagName('browser')));
			if ('SplitBrowser' in window) browsers = browsers.concat(SplitBrowser.browsers);
			return browsers;
		},

		init : function()
		{
			var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
			canvas.setAttribute('id', 'fullScreenCanvas-canvas');
			canvas.setAttribute('width', '0');
			canvas.setAttribute('height', '0');
			canvas.setAttribute('style', 'width:0;height:0;');
			this.canvas = canvas;

			var style = document.createElementNS('http://www.w3.org/1999/xhtml', 'style');
			style.setAttribute('id', 'fullScreenCanvas-style');
			style.setAttribute('type', 'text/css');
			style.appendChild(document.createTextNode([
				':root[fullScreenCanvas-state="shown"] > *:not(#fullScreenCanvas-box) {',
				'	visibility: hidden !important;',
				'}',
				'#fullScreenCanvas-style {',
				'	display: none;',
				'}',
				'#fullScreenCanvas-box {',
				'	position: fixed;',
				'	top: 0;',
				'	left: 0;',
				'	visibility: collapse;',
				'}',
				':root[fullScreenCanvas-state="shown"] > #fullScreenCanvas-box {',
				'	visibility: visible;',
				'}'
			].join('')));
			this.style = style;

			var stylePI = document.createProcessingInstruction(
							'xml-stylesheet',
							'type="text/css" href="#fullScreenCanvas-style"'
						);
			this.stylePI = stylePI;

			var box = document.createElement('box');
			box.setAttribute('id', 'fullScreenCanvas-box');
			box.setAttribute('onclick', 'fullScreenCanvas.onClick(event);');
			this.box = box;

			box.appendChild(canvas);
			box.appendChild(style);
			document.documentElement.appendChild(box);

			document.insertBefore(stylePI, document.documentElement);
		},

		destroy : function()
		{
			document.documentElement.removeChild(this.box);
			document.removeChild(this.stylePI);
			this.box = null;
			this.canvas = null;
			this.style = null;
			this.stylePI = null;
		},


		// for backward compatibility
		getZoomForFrame : function()
		{
			return 1;
		}
	};

	fullScreenCanvas.init();
}, true);

]]></script>

</overlay>
